#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('caro-api-hhd:server');
const http = require('http');
const socketfunc = require('../socket.io/socket.io')

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Create socket io.
 */
const io = require('socket.io')(server, {
  cors: {
    origin: process.env.ALLOW_ACCESS,
    credentials: true
  }
});
io.on('connection', socket => socketfunc(io, socket));
//////////////////////////////////////////////////////////////////////
// const NEW_CHAT_MESSAGE_EVENT = "newChatMessage";
//
// io.on("connection", (socket) => {
//     // Join a conversation
//     const { roomId } = socket.handshake.query;
//     socket.join(roomId);
//
//     // Listen for new messages
//     socket.on(NEW_CHAT_MESSAGE_EVENT, (data) => {
//         io.in(roomId).emit(NEW_CHAT_MESSAGE_EVENT, data);
//     });
//
//     // Leave the room if the user closes the socket
//     socket.on("disconnect", () => {
//         socket.leave(roomId);
//     });
// });
//////////////////////////////////////////////////////////////////////
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
    console.log(`Server on http://localhost:${port}/`)
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
